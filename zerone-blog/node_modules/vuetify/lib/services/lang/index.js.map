{"version":3,"sources":["../../../src/services/lang/index.ts"],"names":[],"mappings":";;;;;;;;;AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA;AACA,OAAO,EAAP,MAAe,iBAAf;AAEA;AACA,SAAS,oBAAT,QAAqC,oBAArC;AACA,SAAS,YAAT,EAAuB,WAAvB,QAA0C,oBAA1C;AAQA,IAAM,cAAc,WAApB;AACA,IAAM,WAAW,OAAO,eAAP,CAAjB;AAEA,SAAS,cAAT,CACE,MADF,EAEE,GAFF,EAGuB;AAAA,QAArB,aAAqB,uEAAL,KAAK;;AAErB,QAAM,WAAW,IAAI,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,CAAjB;AACA,QAAI,cAAc,qBAAqB,MAArB,EAA6B,QAA7B,EAAuC,QAAvC,CAAlB;AAEA,QAAI,gBAAgB,QAApB,EAA8B;AAC5B,YAAI,aAAJ,EAAmB;AACjB,+CAAiC,QAAjC;AACA,0BAAc,GAAd;AACD,SAHD,MAGO;AACL,8CAAgC,QAAhC;AACA,0BAAc,eAAe,EAAf,EAAmB,GAAnB,EAAwB,IAAxB,CAAd;AACD;AACF;AAED,WAAO,WAAP;AACD;AAED,WAAa,IAAb;AAAA;;AAOE,oBAAsD;AAAA,YAAzC,OAAyC,uEAAF,EAAE;;AAAA;;AAAA;;AAEpD,cAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,IAAlC;AACA,cAAK,OAAL,GAAe,OAAO,MAAP,CAAc,EAAE,MAAF,EAAd,EAAsB,QAAQ,OAA9B,CAAf;AACA,cAAK,UAAL,GAAkB,QAAQ,CAA1B;AAJoD;AAKrD;;AAZH;AAAA;AAAA,0BAcY,GAdZ,EAcyC;AAAA,8CAAb,MAAa;AAAb,sBAAa;AAAA;;AACrC,gBAAI,CAAC,IAAI,UAAJ,CAAe,WAAf,CAAL,EAAkC,OAAO,GAAP;AAElC,gBAAI,KAAK,UAAT,EAAqB,OAAO,KAAK,UAAL,cAAgB,GAAhB,SAAwB,MAAxB,EAAP;AAErB,gBAAM,cAAc,eAAe,KAAK,OAAL,CAAa,KAAK,OAAlB,CAAf,EAA2C,GAA3C,CAApB;AAEA,mBAAO,YAAY,OAAZ,CAAoB,YAApB,EAAkC,UAAC,KAAD,EAAgB,KAAhB,EAAiC;AACxE;AACA,uBAAO,OAAO,OAAO,CAAC,KAAR,CAAP,CAAP;AACD,aAHM,CAAP;AAID;AAzBH;;AAAA;AAAA,EAA0B,OAA1B;AACS,KAAA,QAAA,GAAW,MAAX","sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Language\nimport en from '../../locale/en'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport {\n  VuetifyLangOptions,\n  VuetifyLocale,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingFallback = false\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingFallback) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(en, key, true)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service {\n  static property = 'lang'\n\n  public locales: Record<string, VuetifyLocale>\n  public current: string\n  private translator: ((key: string, ...params: any[]) => string) | undefined\n\n  constructor (options: Partial<VuetifyLangOptions> = {}) {\n    super()\n    this.current = options.current || 'en'\n    this.locales = Object.assign({ en }, options.locales)\n    this.translator = options.t\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return key\n\n    if (this.translator) return this.translator(key, ...params)\n\n    const translation = getTranslation(this.locales[this.current], key)\n\n    return translation.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"],"sourceRoot":""}