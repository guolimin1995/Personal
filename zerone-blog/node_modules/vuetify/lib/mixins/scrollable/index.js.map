{"version":3,"sources":["../../../src/mixins/scrollable/index.ts"],"names":[],"mappings":";AACA,OAAO,MAAP,MAAmB,yBAAnB;AAEA;AACA,SAAS,WAAT,QAA4B,oBAA5B;AAEA;AACA,OAAO,GAAP,MAAgB,KAAhB;AAEA;;;;;;;;AAQA;AACA,eAAe,IAAI,MAAJ,CAAW;AACxB,UAAM,YADkB;AAGxB,gBAAY,EAAE,cAAF,EAHY;AAKxB,WAAO;AACL,sBAAc,MADT;AAEL,yBAAiB,CAAC,MAAD,EAAS,MAAT;AAFZ,KALiB;AAUxB,UAAM;AAAA,eAAO;AACX,2BAAe,CADJ;AAEX,8BAAkB,CAFP;AAGX,sBAAU,KAHC;AAIX,2BAAe,KAJJ;AAKX,4BAAgB,CALL;AAMX,yBAAa,CANF;AAOX,oBAAQ;AAPG,SAAP;AAAA,KAVkB;AAoBxB,cAAU;AACR;;;;;AAKA,iBANQ,uBAMC;AACP,mBAAO,OAAO,MAAP,KAAkB,WAAzB;AACD,SARO;;AASR;;;;AAIA,+BAbQ,qCAae;AACrB,mBAAO,KAAK,eAAL,GACH,OAAO,KAAK,eAAZ,CADG,GAEH,GAFJ;AAGD;AAjBO,KApBc;AAwCxB,WAAO;AACL,qBADK,2BACQ;AACX,iBAAK,WAAL,GAAmB,KAAK,WAAL,IAAoB,KAAK,aAA5C;AACD,SAHI;AAIL,gBAJK,sBAIG;AACN,iBAAK,WAAL,GAAmB,CAAnB;AACD;AANI,KAxCiB;AAiDxB,WAjDwB,qBAiDjB;AACL,YAAI,KAAK,YAAT,EAAuB;AACrB,iBAAK,MAAL,GAAc,SAAS,aAAT,CAAuB,KAAK,YAA5B,CAAd;AAEA,gBAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,0EAAwD,KAAK,YAA7D,EAA6E,IAA7E;AACD;AACF;AACF,KAzDuB;;AA2DxB,aAAS;AACP,gBADO,sBACC;AAAA;;AACN,gBAAI,CAAC,KAAK,SAAV,EAAqB;AAErB,iBAAK,cAAL,GAAsB,KAAK,aAA3B;AACA,iBAAK,aAAL,GAAqB,KAAK,MAAL,GACjB,KAAK,MAAL,CAAY,SADK,GAEjB,OAAO,WAFX;AAIA,iBAAK,aAAL,GAAqB,KAAK,aAAL,GAAqB,KAAK,cAA/C;AACA,iBAAK,gBAAL,GAAwB,KAAK,GAAL,CAAS,KAAK,aAAL,GAAqB,KAAK,uBAAnC,CAAxB;AAEA,iBAAK,SAAL,CAAe,YAAK;AAClB,oBACE,KAAK,GAAL,CAAS,MAAK,aAAL,GAAqB,MAAK,WAAnC,IACA,MAAK,uBAFP,EAGE,MAAK,YAAL;AACH,aALD;AAMD,SAlBM;;AAmBP;;;;;AAKA,oBAxBO,0BAwBK,CAAkB;AAxBvB;AA3De,CAAX,CAAf","sourcesContent":["// Directives\nimport Scroll from '../../directives/scroll'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n/* @vue/component */\nexport default Vue.extend({\n  name: 'scrollable',\n\n  directives: { Scroll },\n\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number],\n  },\n\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null as Element | null,\n  }),\n\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll (): boolean {\n      return typeof window !== 'undefined'\n    },\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold (): number {\n      return this.scrollThreshold\n        ? Number(this.scrollThreshold)\n        : 300\n    },\n  },\n\n  watch: {\n    isScrollingUp () {\n      this.savedScroll = this.savedScroll || this.currentScroll\n    },\n    isActive () {\n      this.savedScroll = 0\n    },\n  },\n\n  mounted () {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget)\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this)\n      }\n    }\n  },\n\n  methods: {\n    onScroll () {\n      if (!this.canScroll) return\n\n      this.previousScroll = this.currentScroll\n      this.currentScroll = this.target\n        ? this.target.scrollTop\n        : window.pageYOffset\n\n      this.isScrollingUp = this.currentScroll < this.previousScroll\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold)\n\n      this.$nextTick(() => {\n        if (\n          Math.abs(this.currentScroll - this.savedScroll) >\n          this.computedScrollThreshold\n        ) this.thresholdMet()\n      })\n    },\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet () { /* noop */ },\n  },\n})\n"],"sourceRoot":""}