var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Mixins
import { factory as GroupableFactory } from '../../mixins/groupable';
import Routable from '../../mixins/routable';
import Themeable from '../../mixins/themeable';
// Utilities
import { keyCodes } from './../../util/helpers';
import mixins from '../../util/mixins';
var baseMixins = mixins(Routable,
// Must be after routable
// to overwrite activeClass
GroupableFactory('tabsBar'), Themeable);
export default baseMixins.extend().extend().extend({
    name: 'v-tab',
    props: {
        ripple: {
            type: [Boolean, Object],
            default: true
        }
    },
    data: function data() {
        return {
            proxyClass: 'v-tab--active'
        };
    },
    computed: {
        classes: function classes() {
            return _extends({
                'v-tab': true
            }, Routable.options.computed.classes.call(this), {
                'v-tab--disabled': this.disabled
            }, this.groupClasses);
        },
        value: function value() {
            var to = this.to || this.href || '';
            if (this.$router && this.to === Object(this.to)) {
                var resolve = this.$router.resolve(this.to, this.$route, this.append);
                to = resolve.href;
            }
            return to.replace('#', '');
        }
    },
    mounted: function mounted() {
        this.onRouteChange();
    },

    methods: {
        click: function click(e) {
            // If user provides an
            // actual link, do not
            // prevent default
            if (this.href && this.href.indexOf('#') > -1) e.preventDefault();
            if (e.detail) this.$el.blur();
            this.$emit('click', e);
            this.to || this.toggle();
        }
    },
    render: function render(h) {
        var _this = this;

        var _generateRouteLink = this.generateRouteLink(),
            tag = _generateRouteLink.tag,
            data = _generateRouteLink.data;

        data.attrs = _extends({}, data.attrs, {
            'aria-selected': String(this.isActive),
            role: 'tab',
            tabindex: 0
        });
        data.on = _extends({}, data.on, {
            keydown: function keydown(e) {
                if (e.keyCode === keyCodes.enter) _this.click(e);
                _this.$emit('keydown', e);
            }
        });
        return h(tag, data, this.$slots.default);
    }
});
//# sourceMappingURL=VTab.js.map