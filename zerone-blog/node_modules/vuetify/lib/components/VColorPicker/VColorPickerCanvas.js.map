{"version":3,"sources":["../../../src/components/VColorPicker/VColorPickerCanvas.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VColorPickerCanvas.sass'\n\n// Helpers\nimport { clamp, convertToUnit } from '../../util/helpers'\nimport { fromHSVA, VColorPickerColor, fromRGBA } from './util'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nexport default Vue.extend({\n  name: 'v-color-picker-canvas',\n\n  props: {\n    color: {\n      type: Object,\n      default: () => fromRGBA({ r: 255, g: 0, b: 0, a: 1 }),\n    } as PropValidator<VColorPickerColor>,\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      default: 10,\n    },\n    height: {\n      type: [Number, String],\n      default: 150,\n    },\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data () {\n    return {\n      boundingRect: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n      } as ClientRect,\n    }\n  },\n\n  computed: {\n    dot (): { x: number, y: number} {\n      if (!this.color) return { x: 0, y: 0 }\n\n      return {\n        x: this.color.hsva.s * parseInt(this.width, 10),\n        y: (1 - this.color.hsva.v) * parseInt(this.height, 10),\n      }\n    },\n  },\n\n  watch: {\n    'color.hue': 'updateCanvas',\n  },\n\n  mounted () {\n    this.updateCanvas()\n  },\n\n  methods: {\n    emitColor (x: number, y: number) {\n      const { left, top, width, height } = this.boundingRect\n\n      this.$emit('update:color', fromHSVA({\n        h: this.color.hue,\n        s: clamp(x - left, 0, width) / width,\n        v: 1 - clamp(y - top, 0, height) / height,\n        a: this.color.alpha,\n      }))\n    },\n    updateCanvas () {\n      if (!this.color) return\n\n      const canvas = this.$refs.canvas as HTMLCanvasElement\n      const ctx = canvas.getContext('2d')\n\n      if (!ctx) return\n\n      const saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0)\n      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)') // white\n      saturationGradient.addColorStop(1, `hsla(${this.color.hue}, 100%, 50%, 1)`)\n      ctx.fillStyle = saturationGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n      const valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\n      valueGradient.addColorStop(0, 'hsla(0, 0%, 100%, 0)') // transparent\n      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)') // black\n      ctx.fillStyle = valueGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n    },\n    handleClick (e: MouseEvent) {\n      if (this.disabled) return\n\n      this.boundingRect = this.$el.getBoundingClientRect()\n      this.emitColor(e.clientX, e.clientY)\n    },\n    handleMouseDown (e: MouseEvent) {\n      // To prevent selection while moving cursor\n      e.preventDefault()\n\n      if (this.disabled) return\n\n      this.boundingRect = this.$el.getBoundingClientRect()\n\n      window.addEventListener('mousemove', this.handleMouseMove)\n      window.addEventListener('mouseup', this.handleMouseUp)\n    },\n    handleMouseMove (e: MouseEvent) {\n      if (this.disabled) return\n\n      this.emitColor(e.clientX, e.clientY)\n    },\n    handleMouseUp () {\n      window.removeEventListener('mousemove', this.handleMouseMove)\n      window.removeEventListener('mouseup', this.handleMouseUp)\n    },\n    genCanvas (): VNode {\n      return this.$createElement('canvas', {\n        ref: 'canvas',\n        attrs: {\n          width: this.width,\n          height: this.height,\n        },\n      })\n    },\n    genDot (): VNode {\n      const radius = parseInt(this.dotSize, 10) / 2\n      const x = convertToUnit(this.dot.x - radius)\n      const y = convertToUnit(this.dot.y - radius)\n\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__canvas-dot',\n        class: {\n          'v-color-picker__canvas-dot--disabled': this.disabled,\n        },\n        style: {\n          width: convertToUnit(this.dotSize),\n          height: convertToUnit(this.dotSize),\n          transform: `translate(${x}, ${y})`,\n        },\n      })\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-color-picker__canvas',\n      style: {\n        width: convertToUnit(this.width),\n        height: convertToUnit(this.height),\n      },\n      on: {\n        click: this.handleClick,\n        mousedown: this.handleMouseDown,\n      },\n    }, [\n      this.genCanvas(),\n      this.genDot(),\n    ])\n  },\n})\n"],"sourceRoot":""}