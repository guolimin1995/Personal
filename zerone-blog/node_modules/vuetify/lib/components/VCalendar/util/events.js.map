{"version":3,"sources":["../../../../src/components/VCalendar/util/events.ts"],"names":[],"mappings":"AAAA,SAEE,cAFF,EAGE,gBAHF,EAIE,sBAJF,QAKO,aALP;AAuBA,OAAM,SAAU,UAAV,CAAsB,KAAtB,EAA0C,KAA1C,EAAyD,aAAzD,EAAgF,WAAhF,EAAmG;AACvG,QAAI,EAAE,iBAAiB,KAAnB,CAAJ,EAA+B;AAC7B,cAAM,IAAI,KAAJ,CAAU,SAAS,aAAT,GAAyB,0GAAnC,CAAN;AACD;AAED,QAAM,QAAoB,eAAe,MAAM,aAAN,CAAf,CAA1B;AACA,QAAM,MAAmB,MAAO,WAAP,IAAuB,eAAe,MAAO,WAAP,CAAf,CAAvB,GAA8D,KAAvF;AACA,QAAM,kBAA0B,iBAAiB,KAAjB,CAAhC;AACA,QAAM,2BAAmC,uBAAuB,KAAvB,CAAzC;AACA,QAAM,gBAAwB,iBAAiB,GAAjB,CAA9B;AACA,QAAM,yBAAiC,uBAAuB,GAAvB,CAAvC;AACA,QAAM,SAAkB,CAAC,MAAM,OAA/B;AAEA,WAAO,EAAE,YAAF,EAAS,YAAT,EAAgB,gCAAhB,EAAiC,kDAAjC,EAA2D,QAA3D,EAAgE,4BAAhE,EAA+E,8CAA/E,EAAuG,cAAvG,EAA+G,YAA/G,EAAP;AACD;AAED,OAAM,SAAU,SAAV,CAAqB,KAArB,EAA0C,aAA1C,EAA+D;AACnE,WAAO,iBAAiB,MAAM,eAAvB,IAA0C,iBAAiB,MAAM,aAAxE;AACD;AAED,OAAM,SAAU,kBAAV,CAA8B,KAA9B,EAAmD,eAAnD,EAA4E,aAA5E,EAAiG;AACrG,WAAO,mBAAmB,MAAM,aAAzB,IAA0C,iBAAiB,MAAM,eAAxE;AACD","sourcesContent":["import {\n  VTimestamp,\n  parseTimestamp,\n  getDayIdentifier,\n  getTimestampIdentifier,\n} from './timestamp'\n\nexport interface VEventInput {\n  [prop: string]: any\n}\n\nexport interface VEventParsed {\n  input: VEventInput\n  start: VTimestamp\n  startIdentifier: number\n  startTimestampIdentifier: number\n  end: VTimestamp\n  endIdentifier: number\n  endTimestampIdentifier: number\n  allDay: boolean\n  index: number\n}\n\nexport function parseEvent (input: VEventInput, index: number, startProperty: string, endProperty: string): VEventParsed {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm')\n  }\n\n  const start: VTimestamp = parseTimestamp(input[startProperty]) as VTimestamp\n  const end: VTimestamp = (input[ endProperty ] ? parseTimestamp(input[ endProperty ]) : start) as VTimestamp\n  const startIdentifier: number = getDayIdentifier(start)\n  const startTimestampIdentifier: number = getTimestampIdentifier(start)\n  const endIdentifier: number = getDayIdentifier(end)\n  const endTimestampIdentifier: number = getTimestampIdentifier(end)\n  const allDay: boolean = !start.hasTime\n\n  return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index }\n}\n\nexport function isEventOn (event: VEventParsed, dayIdentifier: number): boolean {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier\n}\n\nexport function isEventOverlapping (event: VEventParsed, startIdentifier: number, endIdentifier: number): boolean {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier\n}\n"],"sourceRoot":""}