{"version":3,"sources":["../../../src/services/theme/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport * as ThemeUtils from './utils'\n\n// Types\nimport Vue from 'vue'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemeOptions,\n  VuetifyThemes,\n  VuetifyThemeVariant,\n} from 'vuetify/types/services/theme'\n\nexport class Theme extends Service {\n  static property = 'theme'\n\n  public disabled = false\n  public options: VuetifyThemeOptions['options']\n  public styleEl?: HTMLStyleElement\n  public themes: VuetifyThemes = {\n    light: {\n      primary: '#1976D2',   // blue.darken2\n      secondary: '#424242', // grey.darken3\n      accent: '#82B1FF',    // blue.accent1\n      error: '#FF5252',     // red.accent2\n      info: '#2196F3',      // blue.base\n      success: '#4CAF50',   // green.base\n      warning: '#FB8C00',    // amber.base\n    },\n    dark: {\n      primary: '#2196F3',   // blue.base\n      secondary: '#424242', // grey.darken3\n      accent: '#FF4081',    // pink.accent-2\n      error: '#FF5252',     // red.accent2\n      info: '#2196F3',      // blue.base\n      success: '#4CAF50',   // green.base\n      warning: '#FB8C00',    // amber.base\n    },\n  }\n  public defaults: VuetifyThemes = this.themes\n\n  private isDark = null as boolean | null\n  private vueInstance = null as Vue | null\n\n  constructor (options: Partial<VuetifyThemeOptions> = {}) {\n    super()\n    if (options.disable) {\n      this.disabled = true\n\n      return\n    }\n\n    this.options = {\n      ...this.options,\n      ...options.options,\n    }\n\n    this.dark = Boolean(options.dark)\n    const themes = options.themes || {}\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false),\n    }\n  }\n\n  // When setting css, check for element\n  // and apply new values\n  set css (val: string) {\n    this.checkOrCreateStyleElement() && (this.styleEl!.innerHTML = val)\n  }\n\n  set dark (val: boolean) {\n    const oldDark = this.isDark\n\n    this.isDark = val\n    // Only apply theme after dark\n    // has already been set before\n    oldDark != null && this.applyTheme()\n  }\n\n  get dark () {\n    return Boolean(this.isDark)\n  }\n\n  // Apply current theme default\n  // only called on client side\n  public applyTheme (): void {\n    if (this.disabled) return this.clearCss()\n\n    this.css = this.generatedStyles\n  }\n\n  public clearCss (): void {\n    this.css = ''\n  }\n\n  // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n  public init (root: Vue, ssrContext?: any): void {\n    if (this.disabled) return\n\n    const meta = Boolean((root as any).$meta) // TODO: don't import public types from /src\n    const ssr = Boolean(ssrContext)\n\n    /* istanbul ignore else */\n    if (meta) {\n      this.initNuxt(root)\n    } else if (ssr) {\n      this.initSSR(ssrContext)\n    }\n\n    this.initTheme()\n  }\n\n  // Allows for you to set target theme\n  public setTheme (theme: 'light' | 'dark', value: object) {\n    this.themes[theme] = Object.assign(this.themes[theme], value)\n    this.applyTheme()\n  }\n\n  // Reset theme defaults\n  public resetThemes () {\n    this.themes.light = Object.assign({}, this.defaults.light)\n    this.themes.dark = Object.assign({}, this.defaults.dark)\n    this.applyTheme()\n  }\n\n  // Check for existence of style element\n  private checkOrCreateStyleElement (): boolean {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet') as HTMLStyleElement\n\n    /* istanbul ignore next */\n    if (this.styleEl) return true\n\n    this.genStyleElement() // If doesn't have it, create it\n\n    return Boolean(this.styleEl)\n  }\n\n  private fillVariant (\n    theme: Partial<VuetifyThemeVariant> = {},\n    dark: boolean\n  ): VuetifyThemeVariant {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light']\n\n    return Object.assign({},\n      defaultTheme,\n      theme\n    )\n  }\n\n  // Generate the style element\n  // if applicable\n  private genStyleElement (): void {\n    if (typeof document === 'undefined') return\n\n    /* istanbul ignore next */\n    const options = this.options || {}\n\n    this.styleEl = document.createElement('style')\n    this.styleEl.type = 'text/css'\n    this.styleEl.id = 'vuetify-theme-stylesheet'\n\n    if (options.cspNonce) {\n      this.styleEl.setAttribute('nonce', options.cspNonce)\n    }\n\n    document.head.appendChild(this.styleEl)\n  }\n\n  private initNuxt (root: Vue) {\n    const options = this.options || {}\n    root.$children.push(new Vue({\n      head: {\n        style: [\n          {\n            cssText: this.generatedStyles,\n            type: 'text/css',\n            id: 'vuetify-theme-stylesheet',\n            nonce: options.cspNonce,\n          },\n        ],\n      },\n    } as any))\n  }\n\n  private initSSR (ssrContext?: any) {\n    const options = this.options || {}\n    // SSR\n    const nonce = options.cspNonce ? ` nonce=\"${options.cspNonce}\"` : ''\n    ssrContext.head = ssrContext.head || ''\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`\n  }\n\n  private initTheme () {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return\n\n    // If we get here somehow, ensure\n    // existing instance is removed\n    if (this.vueInstance) this.vueInstance.$destroy()\n\n    // Use Vue instance to track reactivity\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n    this.vueInstance = new Vue({\n      data: { themes: this.themes },\n\n      watch: {\n        themes: {\n          immediate: true,\n          deep: true,\n          handler: () => this.applyTheme(),\n        },\n      },\n    })\n  }\n\n  get currentTheme () {\n    const target = this.dark ? 'dark' : 'light'\n\n    return this.themes[target]\n  }\n\n  get generatedStyles (): string {\n    const theme = this.parsedTheme\n    /* istanbul ignore next */\n    const options = this.options || {}\n    let css\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme)\n      /* istanbul ignore if */\n      if (css != null) return css\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties)\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css)\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css)\n    }\n\n    return css\n  }\n\n  get parsedTheme (): VuetifyParsedTheme {\n    /* istanbul ignore next */\n    const theme = this.currentTheme || {}\n    return ThemeUtils.parse(theme)\n  }\n}\n"],"sourceRoot":""}