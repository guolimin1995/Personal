{"version":3,"sources":["../../../src/mixins/activatable/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Mixins\nimport Delayable from '../delayable'\nimport Toggleable from '../toggleable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot, getSlotType } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { VNode } from 'vue'\n\nconst baseMixins = mixins(\n  Delayable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'activatable',\n\n  props: {\n    activator: {\n      default: null,\n      validator: (val: string | object) => {\n        return ['string', 'object'].includes(typeof val)\n      },\n    } as PropValidator<string | HTMLElement>,\n    disabled: Boolean,\n    internalActivator: Boolean,\n    openOnHover: Boolean,\n  },\n\n  data: () => ({\n    activatorElement: null as null | HTMLElement,\n    activatorNode: [] as VNode[],\n  }),\n\n  watch: {\n    activator () {\n      this.activatorElement = null\n      this.getActivator()\n    },\n  },\n\n  mounted () {\n    const slotType = getSlotType(this, 'activator', true)\n\n    if (slotType && ['v-slot', 'normal'].includes(slotType)) {\n      consoleError(`The activator slot must be bound, try '<template v-slot:activator=\"{ on }\"><v-btn v-on=\"on\">'`, this)\n    }\n  },\n\n  methods: {\n    getValueProxy (): object {\n      const self = this\n      return {\n        get value () {\n          return self.isActive\n        },\n        set value (isActive: boolean) {\n          self.isActive = isActive\n        },\n      }\n    },\n    genActivator () {\n      const node = getSlot(this, 'activator', Object.assign(this.getValueProxy(), {\n        on: this.genActivatorListeners(),\n        attrs: this.genActivatorAttributes(),\n      })) || []\n\n      this.activatorNode = node\n\n      return node\n    },\n    getContentSlot () {\n      return getSlot(this, 'default', this.getValueProxy(), true)\n    },\n    genActivatorAttributes () {\n      return {\n        role: 'button',\n        'aria-haspopup': true,\n        'aria-expanded': String(this.isActive),\n      }\n    },\n    genActivatorListeners () {\n      if (this.disabled) return {}\n\n      const listeners: Record<string, (e: MouseEvent & KeyboardEvent) => void> = {}\n\n      if (this.openOnHover) {\n        listeners.mouseenter = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('open')\n        }\n        listeners.mouseleave = (e: MouseEvent) => {\n          this.getActivator(e)\n          this.runDelay('close')\n        }\n      } else {\n        listeners.click = (e: MouseEvent) => {\n          const activator = this.getActivator(e)\n\n          if (activator) activator.focus()\n\n          this.isActive = !this.isActive\n        }\n      }\n\n      return listeners\n    },\n    getActivator (e?: Event): HTMLElement | null {\n      // If we've already fetched the activator, re-use\n      if (this.activatorElement) return this.activatorElement\n\n      let activator = null\n\n      if (this.activator) {\n        const target = this.internalActivator ? this.$el : document\n\n        activator = typeof this.activator === 'string'\n          ? target.querySelector(this.activator)\n          : this.activator\n      } else if (e) {\n        activator = e.currentTarget || e.target\n      } else if (this.activatorNode.length) {\n        activator = this.activatorNode[0].elm\n      }\n\n      this.activatorElement = activator as HTMLElement\n\n      return this.activatorElement\n    },\n  },\n})\n"],"sourceRoot":""}