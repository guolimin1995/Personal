{"version":3,"sources":["../../../src/components/VCheckbox/VCheckbox.ts"],"names":[],"mappings":";;;;;;;;AAGA;;AAIA;;;AANA;;AAGA;;;;AACA;;;;AAGA;;;;;;AAEA;kBACe,qBAAW,MAAX,CAAkB;AAC/B,UAAM,YADyB;AAG/B,WAAO;AACL,uBAAe,OADV;AAEL,2BAAmB;AACjB,kBAAM,MADW;AAEjB,qBAAS;AAFQ,SAFd;AAML,gBAAQ;AACN,kBAAM,MADA;AAEN,qBAAS;AAFH,SANH;AAUL,iBAAS;AACP,kBAAM,MADC;AAEP,qBAAS;AAFF;AAVJ,KAHwB;AAmB/B,QAnB+B,kBAmB3B;AACF,eAAO;AACL,gCAAoB,KAAK;AADpB,SAAP;AAGD,KAvB8B;;AAyB/B,cAAU;AACR,eADQ,qBACD;AACL,gCACK,iBAAO,OAAP,CAAe,QAAf,CAAwB,OAAxB,CAAgC,IAAhC,CAAqC,IAArC,CADL;AAEE,+CAA+B,IAFjC;AAGE,qCAAqB;AAHvB;AAKD,SAPO;AAQR,oBARQ,0BAQI;AACV,gBAAI,KAAK,kBAAT,EAA6B;AAC3B,uBAAO,KAAK,iBAAZ;AACD,aAFD,MAEO,IAAI,KAAK,QAAT,EAAmB;AACxB,uBAAO,KAAK,MAAZ;AACD,aAFM,MAEA;AACL,uBAAO,KAAK,OAAZ;AACD;AACF;AAhBO,KAzBqB;AA4C/B,WAAO;AACL,qBADK,yBACU,GADV,EACa;AAChB,iBAAK,kBAAL,GAA0B,GAA1B;AACD;AAHI,KA5CwB;AAkD/B,aAAS;AACP,mBADO,yBACI;AACT,mBAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,6BAAa;AADmB,aAA3B,EAEJ,CACD,KAAK,QAAL,CAAc,UAAd,eACK,KAAK,MADV;AAEE,gCAAgB,KAAK,kBAAL,GACZ,OADY,GAEZ,KAAK,QAAL,CAAc,QAAd;AAJN,eADC,EAOD,KAAK,SAAL,CAAe,KAAK,YAAL,CAAkB,KAAK,aAAvB,CAAf,CAPC,EAQD,KAAK,cAAL,CAAoB,eAApB,EAA2B,KAAK,YAAL,CAAkB,KAAK,aAAvB,EAAsC;AAC/D,uBAAO;AACL,0BAAM,KAAK,IADN;AAEL,2BAAO,KAAK;AAFP;AADwD,aAAtC,CAA3B,EAKI,KAAK,YALT,CARC,CAFI,CAAP;AAiBD,SAnBM;AAoBP,sBApBO,4BAoBO;AACZ,mBAAO,CACL,KAAK,WAAL,EADK,EAEL,KAAK,QAAL,EAFK,CAAP;AAID;AAzBM;AAlDsB,CAAlB,C","sourcesContent":["// Styles\nimport '../../styles/components/_selection-controls.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport Selectable from '../../mixins/selectable'\n\n/* @vue/component */\nexport default Selectable.extend({\n  name: 'v-checkbox',\n\n  props: {\n    indeterminate: Boolean,\n    indeterminateIcon: {\n      type: String,\n      default: '$vuetify.icons.checkboxIndeterminate',\n    },\n    onIcon: {\n      type: String,\n      default: '$vuetify.icons.checkboxOn',\n    },\n    offIcon: {\n      type: String,\n      default: '$vuetify.icons.checkboxOff',\n    },\n  },\n\n  data () {\n    return {\n      inputIndeterminate: this.indeterminate,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls': true,\n        'v-input--checkbox': true,\n      }\n    },\n    computedIcon (): string {\n      if (this.inputIndeterminate) {\n        return this.indeterminateIcon\n      } else if (this.isActive) {\n        return this.onIcon\n      } else {\n        return this.offIcon\n      }\n    },\n  },\n\n  watch: {\n    indeterminate (val) {\n      this.inputIndeterminate = val\n    },\n  },\n\n  methods: {\n    genCheckbox () {\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.genInput('checkbox', {\n          ...this.$attrs,\n          'aria-checked': this.inputIndeterminate\n            ? 'mixed'\n            : this.isActive.toString(),\n        }),\n        this.genRipple(this.setTextColor(this.computedColor)),\n        this.$createElement(VIcon, this.setTextColor(this.computedColor, {\n          props: {\n            dark: this.dark,\n            light: this.light,\n          },\n        }), this.computedIcon),\n      ])\n    },\n    genDefaultSlot () {\n      return [\n        this.genCheckbox(),\n        this.genLabel(),\n      ]\n    },\n  },\n})\n"],"sourceRoot":""}