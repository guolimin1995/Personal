{"version":3,"sources":["../../../src/components/transitions/expand-transition.ts"],"names":[],"mappings":";;;;;;kBAac,YAA8C;AAAA,QAAnC,mBAAmC,uEAAb,EAAa;AAAA,QAAT,CAAS,uEAAL,KAAK;;AAC1D,QAAM,eAAe,IAAI,OAAJ,GAAc,QAAnC;AACA,QAAM,4BAA0B,yBAAW,YAAX,CAAhC;AAEA,WAAO;AACL,mBADK,uBACQ,EADR,EAC6B;AAChC,eAAG,OAAH,GAAa,GAAG,UAAhB;AACA,eAAG,aAAH;AACE,4BAAY,GAAG,KAAH,CAAS,UADvB;AAEE,4BAAY,GAAG,KAAH,CAAS,UAFvB;AAGE,0BAAU,GAAG,KAAH,CAAS;AAHrB,eAIG,YAJH,EAIkB,GAAG,KAAH,CAAS,YAAT,CAJlB;AAMD,SATI;AAWL,aAXK,iBAWE,EAXF,EAWuB;AAC1B,gBAAM,eAAe,GAAG,aAAxB;AACA,gBAAM,SAAY,GAAG,cAAH,CAAZ,OAAN;AAEA,eAAG,KAAH,CAAS,WAAT,CAAqB,YAArB,EAAmC,MAAnC,EAA2C,WAA3C;AACA,eAAG,KAAH,CAAS,UAAT,GAAsB,QAAtB;AACA,eAAG,KAAH,CAAS,UAAT,GAAsB,aAAa,UAAnC;AACA,eAAG,KAAH,CAAS,QAAT,GAAoB,QAApB;AACA,eAAG,KAAH,CAAS,YAAT,IAAyB,GAAzB;AAEA,iBAAK,GAAG,YAAR,CAV0B,CAUL;AAErB,eAAG,KAAH,CAAS,UAAT,GAAsB,aAAa,UAAnC;AAEA,gBAAI,uBAAuB,GAAG,OAA9B,EAAuC;AACrC,mBAAG,OAAH,CAAW,SAAX,CAAqB,GAArB,CAAyB,mBAAzB;AACD;AAED,kCAAsB,YAAK;AACzB,mBAAG,KAAH,CAAS,YAAT,IAAyB,MAAzB;AACD,aAFD;AAGD,SAhCI;;AAkCL,oBAAY,WAlCP;AAmCL,wBAAgB,WAnCX;AAqCL,aArCK,iBAqCE,EArCF,EAqCuB;AAC1B,eAAG,aAAH;AACE,4BAAY,EADd;AAEE,4BAAY,EAFd;AAGE,0BAAU,GAAG,KAAH,CAAS;AAHrB,eAIG,YAJH,EAIkB,GAAG,KAAH,CAAS,YAAT,CAJlB;AAOA,eAAG,KAAH,CAAS,QAAT,GAAoB,QAApB;AACA,eAAG,KAAH,CAAS,YAAT,IAA4B,GAAG,cAAH,CAA5B;AACA,iBAAK,GAAG,YAAR,CAV0B,CAUL;AAErB,kCAAsB;AAAA,uBAAO,GAAG,KAAH,CAAS,YAAT,IAAyB,GAAhC;AAAA,aAAtB;AACD,SAlDI;;AAoDL,8BApDK;AAqDL,wBAAgB;AArDX,KAAP;AAwDA,aAAS,UAAT,CAAqB,EAArB,EAA0C;AACxC,YAAI,uBAAuB,GAAG,OAA9B,EAAuC;AACrC,eAAG,OAAH,CAAW,SAAX,CAAqB,MAArB,CAA4B,mBAA5B;AACD;AACD,oBAAY,EAAZ;AACD;AAED,aAAS,WAAT,CAAsB,EAAtB,EAA2C;AACzC,YAAM,OAAO,GAAG,aAAH,CAAiB,YAAjB,CAAb;AACA,WAAG,KAAH,CAAS,QAAT,GAAoB,GAAG,aAAH,CAAiB,QAArC;AACA,YAAI,QAAQ,IAAZ,EAAkB,GAAG,KAAH,CAAS,YAAT,IAAyB,IAAzB;AAClB,eAAO,GAAG,aAAV;AACD;AACF,C","sourcesContent":["import { upperFirst } from '../../util/helpers'\n\ninterface HTMLExpandElement extends HTMLElement {\n  _parent?: (Node & ParentNode & HTMLElement) | null\n  _initialStyle: {\n    transition: string\n    visibility: string | null\n    overflow: string | null\n    height?: string | null\n    width?: string | null\n  }\n}\n\nexport default function (expandedParentClass = '', x = false) {\n  const sizeProperty = x ? 'width' : 'height' as 'width' | 'height'\n  const offsetProperty = `offset${upperFirst(sizeProperty)}` as 'offsetHeight' | 'offsetWidth'\n\n  return {\n    beforeEnter (el: HTMLExpandElement) {\n      el._parent = el.parentNode as (Node & ParentNode & HTMLElement) | null\n      el._initialStyle = {\n        transition: el.style.transition,\n        visibility: el.style.visibility,\n        overflow: el.style.overflow,\n        [sizeProperty]: el.style[sizeProperty],\n      }\n    },\n\n    enter (el: HTMLExpandElement) {\n      const initialStyle = el._initialStyle\n      const offset = `${el[offsetProperty]}px`\n\n      el.style.setProperty('transition', 'none', 'important')\n      el.style.visibility = 'hidden'\n      el.style.visibility = initialStyle.visibility\n      el.style.overflow = 'hidden'\n      el.style[sizeProperty] = '0'\n\n      void el.offsetHeight // force reflow\n\n      el.style.transition = initialStyle.transition\n\n      if (expandedParentClass && el._parent) {\n        el._parent.classList.add(expandedParentClass)\n      }\n\n      requestAnimationFrame(() => {\n        el.style[sizeProperty] = offset\n      })\n    },\n\n    afterEnter: resetStyles,\n    enterCancelled: resetStyles,\n\n    leave (el: HTMLExpandElement) {\n      el._initialStyle = {\n        transition: '',\n        visibility: '',\n        overflow: el.style.overflow,\n        [sizeProperty]: el.style[sizeProperty],\n      }\n\n      el.style.overflow = 'hidden'\n      el.style[sizeProperty] = `${el[offsetProperty]}px`\n      void el.offsetHeight // force reflow\n\n      requestAnimationFrame(() => (el.style[sizeProperty] = '0'))\n    },\n\n    afterLeave,\n    leaveCancelled: afterLeave,\n  }\n\n  function afterLeave (el: HTMLExpandElement) {\n    if (expandedParentClass && el._parent) {\n      el._parent.classList.remove(expandedParentClass)\n    }\n    resetStyles(el)\n  }\n\n  function resetStyles (el: HTMLExpandElement) {\n    const size = el._initialStyle[sizeProperty]\n    el.style.overflow = el._initialStyle.overflow\n    if (size != null) el.style[sizeProperty] = size\n    delete el._initialStyle\n  }\n}\n"],"sourceRoot":""}