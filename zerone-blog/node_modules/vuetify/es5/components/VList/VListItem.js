'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // Styles

// Mixins

// Directives

// Utilities

// Types


require('../../../src/components/VList/VListItem.sass');

var _colorable = require('../../mixins/colorable');

var _colorable2 = _interopRequireDefault(_colorable);

var _routable = require('../../mixins/routable');

var _routable2 = _interopRequireDefault(_routable);

var _groupable = require('../../mixins/groupable');

var _themeable = require('../../mixins/themeable');

var _themeable2 = _interopRequireDefault(_themeable);

var _toggleable = require('../../mixins/toggleable');

var _ripple = require('../../directives/ripple');

var _ripple2 = _interopRequireDefault(_ripple);

var _helpers = require('./../../util/helpers');

var _console = require('../../util/console');

var _mixins = require('../../util/mixins');

var _mixins2 = _interopRequireDefault(_mixins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseMixins = (0, _mixins2.default)(_colorable2.default, _routable2.default, _themeable2.default, (0, _groupable.factory)('listItemGroup'), (0, _toggleable.factory)('inputValue'));
/* @vue/component */
exports.default = baseMixins.extend().extend({
    name: 'v-list-item',
    directives: {
        Ripple: _ripple2.default
    },
    inheritAttrs: false,
    inject: {
        isInGroup: {
            default: false
        },
        isInList: {
            default: false
        },
        isInMenu: {
            default: false
        },
        isInNav: {
            default: false
        }
    },
    props: {
        activeClass: {
            type: String,
            default: function _default() {
                if (!this.listItemGroup) return '';
                return this.listItemGroup.activeClass;
            }
        },
        dense: Boolean,
        inactive: Boolean,
        link: Boolean,
        tag: {
            type: String,
            default: 'div'
        },
        threeLine: Boolean,
        twoLine: Boolean,
        value: null
    },
    data: function data() {
        return {
            proxyClass: 'v-list-item--active'
        };
    },
    computed: {
        classes: function classes() {
            return _extends({
                'v-list-item': true
            }, _routable2.default.options.computed.classes.call(this), {
                'v-list-item--dense': this.dense,
                'v-list-item--disabled': this.disabled,
                'v-list-item--link': this.isClickable && !this.inactive,
                'v-list-item--three-line': this.threeLine,
                'v-list-item--two-line': this.twoLine
            }, this.themeClasses);
        },
        isClickable: function isClickable() {
            return Boolean(_routable2.default.options.computed.isClickable.call(this) || this.listItemGroup);
        }
    },
    created: function created() {
        /* istanbul ignore next */
        if (this.$attrs.hasOwnProperty('avatar')) {
            (0, _console.removed)('avatar', this);
        }
    },

    methods: {
        click: function click(e) {
            if (e.detail) this.$el.blur();
            this.$emit('click', e);
            this.to || this.toggle();
        },
        genAttrs: function genAttrs() {
            var attrs = _extends({
                'aria-disabled': this.disabled ? true : undefined,
                tabindex: this.isClickable && !this.disabled ? 0 : -1
            }, this.$attrs);
            if (this.$attrs.hasOwnProperty('role')) {
                // do nothing, role already provided
            } else if (this.isInNav) {
                // do nothing, role is inherit
            } else if (this.isInGroup) {
                attrs.role = 'listitem';
                attrs['aria-selected'] = String(this.isActive);
            } else if (this.isInMenu) {
                attrs.role = this.isClickable ? 'menuitem' : undefined;
            } else if (this.isInList && !this.isLink) {
                attrs.role = 'listitem';
            }
            return attrs;
        }
    },
    render: function render(h) {
        var _this = this;

        var _generateRouteLink = this.generateRouteLink(),
            tag = _generateRouteLink.tag,
            data = _generateRouteLink.data;

        data.attrs = _extends({}, data.attrs, this.genAttrs());
        data.on = _extends({}, data.on, {
            click: this.click,
            keydown: function keydown(e) {
                /* istanbul ignore else */
                if (e.keyCode === _helpers.keyCodes.enter) _this.click(e);
                _this.$emit('keydown', e);
            }
        });
        var children = this.$scopedSlots.default ? this.$scopedSlots.default({
            active: this.isActive,
            toggle: this.toggle
        }) : this.$slots.default;
        tag = this.inactive ? 'div' : tag;
        return h(tag, this.setTextColor(this.color, data), children);
    }
});
//# sourceMappingURL=VListItem.js.map